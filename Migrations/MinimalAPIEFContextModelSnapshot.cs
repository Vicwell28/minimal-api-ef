// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using minimal_api_ef;

#nullable disable

namespace minimal_api_ef.Migrations
{
    [DbContext(typeof(MinimalAPIEFContext))]
    partial class MinimalAPIEFContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("minimal_api_ef.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Create_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Peso")
                        .HasColumnType("integer");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("2450798d-1abd-4e84-a66c-3df24301986d"),
                            Create_at = new DateTime(2023, 6, 3, 18, 57, 39, 405, DateTimeKind.Utc).AddTicks(3077),
                            Description = "",
                            Name = "Personales",
                            Peso = 20
                        },
                        new
                        {
                            CategoryId = new Guid("dbbf016e-758d-42d8-b8d1-347e42a0dde2"),
                            Create_at = new DateTime(2023, 6, 3, 18, 57, 39, 405, DateTimeKind.Utc).AddTicks(3088),
                            Description = "",
                            Name = "Personales",
                            Peso = 20
                        },
                        new
                        {
                            CategoryId = new Guid("dc61a01f-237e-4f7f-8ab2-47b51d5bf3f9"),
                            Create_at = new DateTime(2023, 6, 3, 18, 57, 39, 405, DateTimeKind.Utc).AddTicks(3092),
                            Description = "",
                            Name = "Personales",
                            Peso = 20
                        },
                        new
                        {
                            CategoryId = new Guid("1a9d1516-1a96-4413-8084-9fc82b28ab44"),
                            Create_at = new DateTime(2023, 6, 3, 18, 57, 39, 405, DateTimeKind.Utc).AddTicks(3097),
                            Description = "",
                            Name = "Personales",
                            Peso = 20
                        });
                });

            modelBuilder.Entity("minimal_api_ef.Models.TaskApi", b =>
                {
                    b.Property<Guid>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Create_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("TaskId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Task", (string)null);

                    b.HasData(
                        new
                        {
                            TaskId = new Guid("a04766b0-9690-4ca5-8321-9c73cfc8f331"),
                            CategoryId = new Guid("2450798d-1abd-4e84-a66c-3df24301986d"),
                            Create_at = new DateTime(2023, 6, 3, 18, 57, 39, 406, DateTimeKind.Utc).AddTicks(1577),
                            Description = "",
                            Priority = 2,
                            Titulo = "Titulo 1"
                        },
                        new
                        {
                            TaskId = new Guid("26cd13ec-bf25-419e-84c9-6808609f5b1e"),
                            CategoryId = new Guid("dbbf016e-758d-42d8-b8d1-347e42a0dde2"),
                            Create_at = new DateTime(2023, 6, 3, 18, 57, 39, 406, DateTimeKind.Utc).AddTicks(1592),
                            Description = "",
                            Priority = 0,
                            Titulo = "Titulo 2"
                        },
                        new
                        {
                            TaskId = new Guid("1a848752-ec55-4f80-a7c1-3e2ad963e89e"),
                            CategoryId = new Guid("dc61a01f-237e-4f7f-8ab2-47b51d5bf3f9"),
                            Create_at = new DateTime(2023, 6, 3, 18, 57, 39, 406, DateTimeKind.Utc).AddTicks(1597),
                            Description = "",
                            Priority = 1,
                            Titulo = "Titulo 3"
                        },
                        new
                        {
                            TaskId = new Guid("f1f86554-0df6-4e67-b8d3-3db051d4091c"),
                            CategoryId = new Guid("1a9d1516-1a96-4413-8084-9fc82b28ab44"),
                            Create_at = new DateTime(2023, 6, 3, 18, 57, 39, 406, DateTimeKind.Utc).AddTicks(1602),
                            Description = "",
                            Priority = 0,
                            Titulo = "Titulo 4"
                        });
                });

            modelBuilder.Entity("minimal_api_ef.Models.TaskApi", b =>
                {
                    b.HasOne("minimal_api_ef.Models.Category", "Catrgory")
                        .WithMany("tasks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catrgory");
                });

            modelBuilder.Entity("minimal_api_ef.Models.Category", b =>
                {
                    b.Navigation("tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
